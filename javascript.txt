**********************HTML*******************

1 HTML nima?
	HTML Hyper Text Markup Language, Bu Wordl Wide Web tili yani brauzerlarga har xil textlar, videolar, rasmlarni chiqarib berish uchun xizmat qiladi.

2 Teglar nima? 
	HTML teglari HTML hujjatlarini yaratish va ularning xususiyatlarini ko'rsatish uchun ishlatiladi. Har bir HTML teglari turli xil xususiyatlarga ega. Teglar ikki turga bo'linadi? Juft 	va Toq. Juft teglar Ochiladi content va yopiladi. Toqlar esa faqat ochiladi ular yopilmaydi.

3 HTMLda formatlash nima?
	HTML formatlash - bu matnni yaxshiroq ko'rinish va his qilish uchun formatlash jarayoni. U matnni qalin, kursiv va tagiga chizilgan qilish uchun turli teglardan foydalanadi.

4 HTML elementlari va teglar o'rtasidagi farq nima?
	HTML elementlari matnni ko'rsatish uchun brauzer bilan bog'lanadi. Elementlar <> qavslar bilan o'ralgan bo'lsa, ular HTML teglarini hosil qiladi. Ko'pincha teglar juft bo'lib, 	atrofni o'rab turadi.

5 Web sahifa ichida boshqa web sahifani qanday qilib yaratishimiz mumkin?
	Web sahifa ichida boshqa web sahifani iframe tegi yordamida yaratishimiz mumkin.

6 Bo'sh elementlar nima?
	Tarkibsiz HTML elementlari bo'sh elementlar deb ataladi. Masalan: <br>, <hr> va boshqalar.

7 Nima uchun URL HTML-da kodlangan?
	URL manzili ASCII bo'lmagan belgilarni Internet orqali foydalanish mumkin bo'lgan formatga aylantirish uchun kodlangan, chunki URL faqat ASCII belgilar to'plamidan foydalangan holda 	Internet orqali yuboriladi. Agar URLda ASCII to'plamidan tashqari belgilar mavjud bo'lsa, URL o'zgartirilishi kerak. ASCII bo'lmagan belgilar "%" va keyin o'n oltilik raqamlar bilan 	almashtiriladi.

8 <!DOCTYPE html> tegi HTML tegmi?
	Yo'q, <!DOCTYPE html> deklaratsiyasi HTML tegi emas. HTMLning ko'p turlari mavjud, masalan. HTML 4.01 Strict, HTML 4.01 Transitional, HTML 4.01 Frameset, XHTML 1.0 Strict, XHTML 1.0 	Transitional, XHTML 1.0 Frameset, XHTML 1.1 va boshqalar. Shunday qilib, <!DOCTYPE html> veb-brauzerga HTML sahifasi haqida ko'rsatma berish uchun ishlatiladi.

9 SVG nima?
	SVG bu 2 o'lchamli vektordir. unda asosan diagrammalarni tasvirlash uchun ishlatamiz. 

10 HTML5 qaysi turdagi video formatlarini qo'llab-quvvatlaydi?
	HTML 5 uchta video formatini qo'llab-quvvatlaydi:

	mp4, WebM, Ogg
11 meta teglari nima uchun foydalanamiz?
	Ularni asosan htmlimizning formatini belgilash uchun va saytimizning seo qismi uchun foydalanamiz,

****************************CSS**************************

Javascriptda asinxron kodlar yani settimeout, setintervallar callback queda saqlanadi

1 npm nima?
	npm - node package manager Javascript dasturlash tili uchun paket manager hisoblanadi. Unda javascript kodimizni oson ishlatishimiz tayyor kodlar mavjud.
2 Nodejs o'zi nima?
	Javascript kodimizni brauzerdan tashqarida ishlatishimiz uchun run time environment
	(Real timeda ishlovchi muhit) Nodejs brauzerdan tashqarida ishlashi uchun Google chromening
	V8 enginedan foydalangan. Nodejs non-blocking IO hisoblanadi u libyumizni blocklab qo'ymaydi.
3 V8 engine nima?
	V8 enginimiz Google Chrome tomonidan ishlab chiqilgan va bizning javascript kodimizni
	mashin kodga o'girib beruvchi divegatel hisoblanadi. Bu Google brauzerida mavjud shuning uchun
	Javascript kodimiz brauzerda ishlaydi.
4 Libuv nima?
	Libuv qisqa qilib aytganda I/O amalga oshirish uchun kutubxona hisoblanadi.
	Javascript to'g'ridan to'g'ri Operatsion sistemamizga murojat qilolmaydi
	shuning uchun C da qurilgan libuv orqali operatsion sistemamizga murojat
	qilsak bo'ladi, file'lar bilan ishlasak bo'ladi, yaratayotgan proektimizni
	internetga ulanishini ham libuv ta'milab beradi.
?????????
5 Nodejs single threadedmi yo Multi threadedmi?
	Nodejs single threaded lekin u non-blocking I/O hisoblanadi yani asynchron ishlaydi.
6 Single-threded va Multi-Threade farqi nimada?
	Single-threadedda bir vaqtda Event loopimiz faqat bir jarayonni bajaradi yani bitta stackni bajaradi. Multe-threaded esa bir vaqtning o'zida bir nechta stacklarni (jarayonlarni)
	bajaradi
7 Nodejsni qanday qilib Multi-threaded qilishimiz mumkin?
	child-proces module bilan multi-threaded qilishimiz mumkin. SPAN, EXEST, FORK mavjud. SHular orqali biz childlarga bo'lib olishimiz mumkin.
8 Nodejsda Event Loop nima?
	Event loop doimiy aylanib turadi va kodlarimizni, Funksiyalarimizni Call Stakga Variablelarni esa Memory hibga joylab chiqadi. Va shu tarizda u bir client requiestini Threaded
	Poolga yani FileSystem, Network, Database va hakazolarga Jo'natib va unda responsni olib clientga yuborish uchun doimiy aylanib turivchi loop hisoblanadi.
9 Callback deganda nimani tushunasiz?
	Bitta funksiya bajarilganda boshqa funksiyani return qilishi callback deyiladi.

	function sum(x1, x2) {
		return x1 + x2
	}

	function calc(num1, num2) {
		sum(num1, num2)
	}

	calc(1, 2)

10 Callback hell nima?
	Callback funksiyalarimiz ichma ich bo'p ketishi callback hell hisoblanadi. function ichida yana function va uni ichida if else va hakazolar.
11 Callback helldan qutilish yo'li qanday, yani asynchron kod yozish?
	async await bilan biz callbackdan qutilishimiz mumkin
12 Nodejsda middlewares vazifasi nima?
	Biz clientdan request qabul qilib uni biror bir shart bo'yicha tekshirib agar shartga mos tushsa clientga responseni qaytarib yuborishimizdir. bunda request va response orasida
	bo'ladi va shart bajarilsa next bo'ladi va response jo'natishimiz mumkin
13 Nodejsda core modullar haqida?
	Nodejsda core modullar libuv ichida mavjud va biz ularni install qilmay turib shunchaki chaqirib ichlatib ketishimiz mumkin. Nodejsda core modullar FS, OS, HTTP, PATH, URL
	shular nodejs core modullar hisoblanadi
14 FS nima vazifani bajaradi?
	FS file system deyiladi va u bilan biz filelar bilan ishlashimiz mumkin. file yaratish o'chirish, file ichiga ma'lumotlar yozish va hakazolardir (read, write, open, appendFile)
15 OS nima?
	OS operation system deyiladi va u yordamida kompyuterimiz ma'lumotlarini bilishimiz va ular bilan ishlashimiz uchun yordam beradi.
16 HTTP nima?
	HTTP Hypertext Transfer Protocol degan ma'noni anglatadi. Bu WWW (World Wide Web) da audio, video, grafik tasvir, matn va boshqa multimedia fayllari kabi fayllarni uzatish
	uchun foydalaniladigan qoidalar to'plamidir.  HTTP hech qanday xavfsizlikka ega emas. Qachonki foydalanuvchi o'z veb-brauzerini ochsa, bu foydalanuvchi bilvosita HTTP-dan
	foydalanadi.
17 PATH nima?
	Path bu bizning qurilmamizdagi filelar turli xil ma'lumotlarning joylashgan o'rni bilan ishlash biror bir proekt qilayotgan bo'lsak shu proekt direktoriyasiga kirib birorta amal
	bajarishimiz uchun ishlatamiz
18 URL nima?
	URL manzil hisoblanadi biror bir manzilga murojat qilishimiz url hisoblanadi. Nodejs url biz biror manzilni faqat hostini yoki pathnameni ajratib olib ishlashimiz uchun
	kerak hisoblanadi
19 Local modullar nima?
	O'zimiz tomonimizdan birorta module yaratishimiz local module hisoblanadi. masalan FSni function sifatida bir joyda yozib keyin uni ko'p joylarda ishlatishimiz uchun kerak.
20 Stream nima?
	Stream katta ma'lumotlarni bo'lib o'qish bo'lib yozish uchun ishlatiladi. uning readible o'qish, witable yozish, va transform degan methodlari mavjud.
21 QueryString nima?
	Masalan serverimizga so'rov jo'natmoqchi bo'lsak querystringdan foydalanib severga URL orqali so'rov jo'natamiz va so'rovni serverda querystring bilan yechib olib shu so'rov
	bo'yicha clientga ma'lumot qaytarib yuboramiz
22 Event Listeners nima?
	Event Listeners birornarsani eshitib turib shu bo'yicha biror hodisa bajarish event Listeners deyiladi masalan httpda serverimizni listen qilib tur va serverimiz yonsa consolega
	nimadir chiqar deyishimiz event Listeners deyiladi.
23 Event Emitter nima?
	Event Emitter bu hodisalarni boshqarish uchun yordam beradi. Masalan sichqonchani uyoqdan bu yoqqa siljitishimizni bir hodisa deb qarasak shu hodisani boshqarish uchun yordam
	beradi.

		const EventEmitter = require("event")
		const evenetEmitter = new EventEmitter()
		eventEmitter.on('start', number => {
  			console.log(`started ${number}`);
		});

		eventEmitter.emit('start', 23);

24 API nima?
	Application Programming interface - bu ikkita dasturning bir-biri bilan aloqa qilishiga imkon beruvchi dasturiy vositachi hisoblanadi. Asosan server bilan Clientni bog'lab turish
	uchun dasturiy vositadir
25 HTTP so'rov usullari qaysilar?
	GET so'rovi ma'lum bir URI orqali serverdan ma'lumotlarni olib kelish uchun ishlatiladi
	POST so'rovi serverga ma'lumot yuborish uchun foydalaniladi. Masalan formada user ma'lumotlarini yuborish file yuklash va hakazo.
	HEAD so'rovi GET so'rovi bilan bir xil lekin HEAD da ma'lum ma'lumot yuborishimiz mumkin
	PUT so'rovi serverda bor resurs ma'lumotlarini yangisi bilan almashtirish uchun ishlatiladi
	DELET so'rovi serverda serverda mavjud resurslarni o'chirish uchun ishlatilinadi
	VA HKZLR

****************************************************************************************************************************************************************************************

26 OOP nima?
	Object oriented programming - Objectga asoslanga dasturlash hisoblanadi. Biz tuzayotgan dasturimiz objectlarga, classlarga asoslanadi. Uni 4 ta uslubi mavjud bular. Biz Ikki xil
	dasturlashdan foydalanamiz 1 FP functionla Programming, 2 OOP Object Oriented Programming
		1 Inheritance
		2 Encapsulation
		3 Abstraction
		4 Polymorphism
27 Inheritance haqida ma'lumot bering?
	Inheritance bu bitta classda shablon yaratib keyin shu shablondan nasl olib  yangi class yaratish hisoblanadi.

	class Car {
		constructor(price, color) {
			this.price = price
			this.color = color
		}

		getInfo(){
			return this.color
		}
	}

	class BMW extend Car {
		constructor(model, price, color){
			super(price, color)
			this.model = model
		}
	}

28 Encapsulation haqida ma'lumot bering?
	class ichida biz methodlarni, ma'lumotlarni yashirib qo'yishimiz mumkin Private qilib ketishimiz mumkin.

  	class Car {
		#klapan = 10
		constructor(price, color) {
			this.price = price
			this.color = color
		}

		getInfo(){
			return this.#klapan
		}
	}

29 Abstraction classimiz qiymat qabul qilib uni ustida ma'lum amallarni bajarib shu ma'lumotni qaytarish. Ma'lumotni abrabotka qilib shu ma'lumotni qaytarish
	getter va setter hisoblanadi. setter ma'lumotni abrabotka qiladi getter esa shu ma'lumotni qaytarish uchun ishlatishimiz mumkin


	class Car {
		#klapan
		constructor(price, color) {
			this.price = price
			this.color = color
		}

		get info(){
			return this.#klapan
		}

		set info(x) {
			return this.#klapan = x
		}
	}


	console.log(Car(1000, "Sariq").info("10 lik klapan"))

30 Polymorphism haqida ma'lumot bering?
	Polymorphism ota super classdan nusxa olgan boshqa bir classni ishlashini o'zgartirishimiz Polymorphisim deyiladi. Masalan bitta Super classimiz Server desak shu classdan boshqa
	serverlarni nasl olib shu serverlarni bajaradigan vazifasini har xil qilib qo'yishimiz Polymorphism deyiladi

******************************************************************************************************************************************************************************

31 Express.js nima?
	Express.js yoki oddiygina Express - bu Node.js uchun bepul, ochiq manbali, engil va tezkor veb-ilovalar tizimi. U MIT litsenziyasi ostida ochiq kodli dasturiy
	ta'minot sifatida chiqariladi. U bir sahifali, ko'p sahifali va gibrid veb-ilovalar va APIlarni yaratish uchun mo'ljallangan.
	U Node.js uchun de-fakto standart server ramkasi deb ataladi. U 2010 yilda TJ Holovaychuk tomonidan asos solingan va ishlab chiqilgan va JavaScript-da yozilgan.

32 Ekspressning o'ziga xos xususiyatlari nimada?
	Express engil, minimal va moslashuvchan Node.js veb-ilovalar ramkasi bo'lgani uchun u veb va mobil ilovalar uchun mustahkam xususiyatlar to'plamini taqdim etadi.
	Quyida ushbu ramkaning ba'zi o'ziga xos xususiyatlari ro'yxati keltirilgan

	1 js bir sahifali, ko'p sahifali va gibrid veb-ilovalar va API-larni loyihalash uchun ishlatilishi mumkin
	2 Bu HTTP/RESTful so'rovlariga javob berish uchun middlewares dasturni o'rnatish imkonini beradi.
	3 Turli xil HTTP operatsiyalarini (usul va URL) bajarish uchun routerlar bilan ishlashimiz osonlashadi
	4 Bu argumentlarni shablonlarga o'tkazish asosida HTML sahifalarini dinamik ravishda ko'rsatish imkonini beradi
	5 U juda tez I/O kirish/chiqish tufayli yuqori unumdorlikni ta'minlaydi.
	6 veb-ilovani MVC arxitekturasida tartibga solishga imkon beradi.
	7 U RDBMS va NoSQL ma'lumotlar bazalarini qo'llab-quvvatlaydi
	8 U asinxron va single-threaded
33 Nima uchun biz Express.js dan foydalanamiz?
	Express.js — avtomatik tarzda oldindan tuzilgan Node.js tizimi boʻlib, u bizga server tomonidagi veb-ilovalarni tezroq va aqlliroq yaratishga yordam beradi.
	Ekspressni tanlashning asosiy sababi uning soddaligi, minimalizmi, moslashuvchanligi va kengaytirilishidir.
34 Express.js va Node.js o'rtasidagi farq nima?
	Node.js brauzerdan tashqari JavaScript kodini bajarish uchun foydalaniladigan ochiq manbali, RUn time environment real vaqtda ishlovchi platformadir. Node.js framework yoki
	dasturlash tili emas; bu veb-server vazifasini bajaradigan platformadir.

	Express Node.js funksionalligiga asoslangan kichik frameworkdir.

***********************************************************************************************************************************************************************************

NTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

	1 OOP
	2 Nodejs
	3 Express
	4 Postgres
	5 Sequileze
	6 Mongodb
	7 Mongoose
	8 Javascript
	9 React
	10 Typescript

***********************************************************************************************************************************************************************************

1 call nima?
	Bu funksiya methodi. Bunda biz

	const userinfo = {
		name: "Mashrab"
		const fullname = function(age) {
			return this.name
		}
	}

	const name = {
		name: "Tohir"
	}

	userinfo.fullname.call(name, 19)
	userinfo.fullname.bind(name)("19")
	userinfo.fullname.apply(name, [19])



***************************************************************************************************************************************************************************
JAVASCRIPT

1 Data typelar necha turga bo'linadi?
	Data typelarni 2 turi mavjud. Bular Primitive va References typelar.

2 Primitive data typega nimalar kiradi?
	Primitive data typelarga
		1 String // "Tohir"
		2 Number // 20
		3 Boolean // True or False
		4 BigInt // Katta sonlar uchun
		5 Null // qiymati ataylab bo'sh qoldirilgan. Tayinlangan type ham deyiladi. ildiz bor lekin qiymat yo'q
		6 Undefined // qiymati hali aniqlanmagan. qiymatga undefined tayinlaymiz lekin qiymat hali aniqmas. ildiz ham qiymat ham yo'q
		7 Symbol // bir xil qiymatlarni unique qilib qo'yish yani bir xil qiymatni bir biriga tengmas deb qo'yadi.

		  console.log(Symbol(a) == Symbol(b)); // false qiymati teng emas
		  console.log(Symbol(a) === Symbol(b)); // false type teng lekin qiymat teng emas

3 Reference data typega nimalar kiradi?
	Reference data typega Object kiradi. Object ichida esa, Function, Array, Object kiradi.

4 Primitive data type bilan Reference data type farqi nimada?
	Primitive data typelarda faqat bitta qiymat saqlanadi va ular to'g'ridan to'g'ri xotirada (Stack) saqlanadi. Reference data type esa 2 va undan ko'p ma'lumotlarni o'zida saqlashi va 	reference data typelar nomi xotirada (Stackda) saqlanadi, heapda esa u typelarni #000, #001, #002 qilib manzil sifatida saqlanadi.

	let myObj = {name: "Ali"}
	let name = "Ali"
	let myObj2 = myObj

	Stack: 			heap:

		myObj				{
		myObj2				name: "ALi" // myObj va myObj2ning heapdagi manzili bir joyda bo'ladi agar myObj yoki myObj2 ning biror qiymati o'zgartirilsa ikkinchisiga ham 										// birdik ta'sir qiladi
						}

		name = "Ali"

5 Javascriptda o'zgaruvchilar necha xil usulda e'lon qilinadi?
	Javascriptda o'zgaruvchilarni 4 xil usulda e'lon qilishimiz mumkin.
		1) var
		2) let
		3) const
		4) Hech narsa bilan
6 let va var farqi nimada?
	let hoistinga uchramaydi va u ES6 (2015-yilidan keyin) dan keyin yaratilgan. var esa hoistinga uchraydi va javascript yaralganda faqat vardan foydalanishgan.
7 let va const farqi?
	letda o'zgaruvchan qiymatlar bersak bo'ladi, ya'ni letdagi o'zgaruvchini qiymatini keyinchalik o'zgartirib ketsak bo'ladi. constda esa keyinchalik qiymatni o'zgartirib bo'lmaydi.
8 Qanaqa javascript operatorlar mavjud?
	1-Arifmetik operatorlar
		+, -, *, /, **, %, ++, --

	2- Assignment Operators (Belgilash operatorlari)
		=, +=, -=, *=, /=, %=, **
	3- Comparison Operators (Taqqoslash operatorlari)
		==, ===, !=, !==, >, <, >=, <=, ?
	4- Logical Operators (Mantiqiy operatorlar)
		&&, ||, !
	5- Type Operators
		typeof, instanceof

9 == va === farqi nimada?
	== bu ma'lumotni faqat qiymatini tekshiradi. === bu esa ma'lumotni ham qiymati ham type bilan tekshiradi.

10 && "va" qachon to'xtaydi?
	&& "va" false qiymat topguncha ishlaydi, va  o'sha falseni chiqarib beradi.
		console.log(true && 1 && "salom" && false && 10) // false.  agar hammasi true bo'lsa eng oxirgi trueni chiqaradi

11 Null bilan Undefined farqi?
	Variablega qiymat bermasak bu undefined, null qiymat bersak bu null. Undefined hali qiymati aniqlanmagan, null esa qiymati ataylab bo'sh qoldirilgan.

12 Type Conversion nima?
	JavaScriptda typelarni bir turdan ikkinchi turga o'zgartirishimiz Type Conversion deyiladi.
		Masalan Number("1")

13 Data type'larni Type Conversion orqali necha turga almashtirishimiz mumkin va ular qaysilar?
	Data typelarni biz 3 ta typega o'girishimiz mumkin.
		1 Stringa. String(123) // "123"
		2 Numberga. Number("2") // 2
		3 Booleanga. Boolean("Olma") // true

14 Data type'larni String'ga oʻzgartirish yoʻllarini ko'rsating?
	Sting(1)
	1 + ""
	1.toString()

15 console ga javob nima chiqadi? let x = true + 1 console.log(x)
	Bunda Booleanga number qo'shilgan vaqti Type Conversion hodisasi amalga oshadi va true ni 1 ga o'zgartirib oladi. Shunda let x = true + 1 => let x = 1 + 1 => 2

16 console.log'ga javob nima chiqadi? let x = true + "1" console.log(x)
	Javob: "true1"

17 Necha xil variable (oʻzgaruvchilar) mavjud va ular qaysilar?
	3 xil o'zgaruvchilar mavjud.
		1 var
		2 let
		3 const

18 let va const farqi nimada?
	let'ni o'zgaruvchi ma'lumotlarda ishlatamiz. const ni esa o'zgarmas ma'lumotlarda ishlatamiz.
	let va const ES6 dan keyin qo'shilgan

19 let va var farqi nimada?
	let o'zi e'lon qilingan qatordan pastda ishlataolamiz yani u hoistinga uchramaydi.
	var ni esa o'zi e'lon qilingan qatordan yuqorida ishlatsak bo'ladi. Yani u hoistinga uchraydi.

20 Hoisting nima?
	Biror bir e'lon qilingan o'zgaruvchi yoki funksiyani o'zi e'lon qilingan qatordan yuqorida ishlataolishimiz hoisting deyiladi.

	
**************************************************************************************************************************************************
REACT

1 Real DOM va Vertual DOM ning farqi nima

	Real dom sekin yangilanadi. Birorta tugunni o'zgartirish kerak bo'lsa bevosita hamma tugunlarga murojat qilishimiz kerak. Xotirani 	ko'p egallaydi.
	Virtula dom tez ishlaydi. Birorta tugunni o'zgartirish uchun boshqa tugunlarni bezovta qilish shart emas. xotirani kam egallaydi

2 Renderning vazifasi nimada
	Reactning maqsadi ko'p jihatdan HTMLni veb-sahifada ko'rsatishdir.

	React HTML-ni veb-sahifaga ReactDOM.render() funksiyasidan foydalanib ko'rsatadi.

	Render funktsiyasi
	ReactDOM.render() funksiyasi ikkita argument, HTML kodi va HTML elementini oladi.

	Funktsiyaning maqsadi belgilangan HTML elementi ichida ko'rsatilgan HTML kodini ko'rsatishdir.

3 JSX nima?
	JSX JavaScript XML degan ma'noni anglatadi.

	JSX bizga React-da HTML yozish imkonini beradi.

	JSX React-da HTML yozish va qo'shishni osonlashtiradi.
4 Componentlar nima?
	Componentlar html qaytaradigan funksiyalar hisoblanadi. Ular JavaScript funktsiyalari bilan bir xil maqsadga xizmat qiladi, lekin 	izolyatsiyada ishlaydi va HTMLni qaytaradi. Ular mustaqil va qayta ishlatishimiz mumkin. Komponentlar ikki xil bo'ladi: Class 	komponentlari va Funktsiya komponentlari, bu qo'llanmada biz Funktsiya komponentlariga e'tibor qaratamiz.

5 Class componenti haqida?
	React 16.8 dan oldin Class komponentlari React komponentidagi holat va hayot aylanishini kuzatishning yagona usuli edi. Function 	componentlar "state-less" deb atalgan yani holatsiz. 
	Hooks qo'shilishi bilan Funktsiya komponentlari endi Class komponentlariga deyarli teng. Farqlar shunchalik kichikki, Reactda hech 	qachon Class komponentidan foydalanishga hojat qolmaydi.

6 Props nima?
	Propslar React komponentlariga uzatiladigan argumentlardir. Propslar komponentlarga HTML atributlari orqali uzatiladi.U proprtylarni 	bildiradi. Propslar Parent => Child bo'yicha ishlaydi. Yani Parent componentdan Child Componentga property (Xususiyat) ni uzatishini 	oqimini ta'minlaydi

7 React list?
	React-da siz ro'yxatlarni qandaydir tsikl bilan ko'rsatasiz.
	JavaScript map() massiv usuli odatda afzal usul hisoblanadi.

8 React Routing?
	Reactning o'zi sahifalarni routing qilmaydi (Marshrutlamaydi) yani bir sahifadan boshqa sahifaga o'tish imkoniyatini bermaydi. 	Buning uchun bizga React-Router kutubxonasi kerak. Bu bilan biz Sahifalarni routing qilish imkoniyatiga ega bo'lamiz. 

9 MEMOIZATION NIMA?
	Yodda saqlash funksiyalar natijalarini saqlash va takroriy natijani qayta olib kelishdan qochish uchun foydalaniladigan keshlash 	shakli bo‘lib, natijalarni takroriy hisoblashga olib keladi.

10 React Memo nima?
	Reactda har doim componentlar State yoki Props qiymati o'zgarganda re-render bo'ladi yani qayta render bo'ladi. Lekin reactda Ota 	componentlarda biror bir sababga ko'ra qayta render re-render bo'lsa uning barcha CHILD componentlarni ham qayta render bo'ladi. 	Agar Parentning birorta childi qayta render bo'lsa ham parentning qolgan childlari ham re-render bo'ladi. Shunaqa muommoni oldini 	olish uchun React Memo kerak bo'ladi. Uning maqsadi Componentlarni eslab qolish va Parent otasi qayta render bo'lsa ham yoki uning 	boshqa child render bo'lsa ham Memodagi component qayta render bo'lmaydi Va bu componentni Memoizationga saqlab qo'yadi yani keshga. Shunda 	biror child element re-render bo'lsa boshqa childlarni qayta render bo'lishini oldini olish uchun 

11 Hook nima?
	Ilgaklar bizga holat va hayot aylanish usullari kabi React xususiyatlariga "ulanish" imkonini beradi.
12 useState hook nima uchun ishlatilinadi?
	useState asosan component holatini kuzatish imkonini beradi. unda asosan component uchun statelar (data) va xususiyatlar Saqlaydi.
13 useEffect 
	unda side effectlarni amalga oshirish uchun ishlatilinadi. Masalan apiga murojat qilish shunga o'xshash
14 useContext nima?
	unda biz ma'lumotlarni bir componentdan ikkinchi componentga o'tkazishimiz mumkin va m.n 3 ta ichma ich component bobosidan nevarasiga ma'lumot o'tkazish uchun propdan foydalanish kerak. uning o'rniga context ishlatganimiz ma'qul

*****************************************
2 Reactjs nima?

React - bu 2011-yilda Facebook tomonidan ishlab chiqilgan JavaScript-ning old qismidagi kutubxona.
U qayta foydalanish mumkin bo'lgan UI komponentlarini yaratishda yordam beradigan komponentlarga asoslangan yondashuvga amal qiladi.
U murakkab va interaktiv veb va mobil foydalanuvchi interfeysini ishlab chiqish uchun ishlatiladi.
U faqat 2015 yilda ochiq manba bo'lgan bo'lsa ham, uni qo'llab-quvvatlovchi eng yirik jamoalardan biriga ega.

3 Reactning xususiyatlari qanday?
Reactning asosiy xususiyatlari quyida keltirilgan:

U haqiqiy DOM o'rniga virtual DOM dan foydalanadi.
U server tomonida renderlashdan foydalanadi.
U bir yo'nalishli ma'lumotlar oqimini yoki ma'lumotlarni bog'lashni kuzatib boradi.

4 React to'liq component hisoblanadi.Va uni qayta ishlatish mumkin

5 Props nima?
Props reactda Propertiylarning qisqartmasi hisoblanadi va Ota componentdan bola componentga malumot yubora oladi. Lekin hech qachon bola componentdan ota componentga rekvizit yetkazib berolmaydi. Bu bir yo'nalishli ma'lumotlar oqimini saqlashga yordam beradi va odatda dinamik ravishda yaratilgan ma'lumotlarni ko'rsatish uchun ishlatiladi.

6 Statelar nima va u qanday ishlatilinadi?
Shtatlar React komponentlarining yuragi hisoblanadi. Davlatlar ma'lumotlar manbai bo'lib, ular iloji boricha sodda saqlanishi kerak. Asosan, holatlar komponentlarning ko'rsatilishi va xatti-harakatlarini belgilaydigan ob'ektlardir. Ular rekvizitlardan farqli o'laroq o'zgaruvchan va dinamik va interaktiv komponentlarni yaratadilar. Ularga this.state() orqali kirish mumkin.

7 React-da hodisa nima?
React-da hodisalar sichqonchani ko'tarish, sichqonchani bosish, tugmani bosish va hokazo kabi muayyan harakatlarga qo'zg'atilgan reaktsiyalardir. Bu hodisalarni boshqarish DOM elementlaridagi hodisalarni boshqarishga o'xshaydi. Ammo sintaktik farqlar mavjud, masalan:

Voqealar kichik harflar o'rniga tuya harfi yordamida nomlanadi.
Voqealar satrlar o'rniga funksiyalar sifatida uzatiladi.
Voqea argumenti hodisaga xos xususiyatlar to'plamini o'z ichiga oladi. Har bir hodisa turi o'z xususiyatlari va xatti-harakatlarini o'z ichiga oladi, ularga faqat voqea ishlov beruvchisi orqali kirish mumkin.

8 Redux nima?
Redux - bugungi bozorda front-end ishlab chiqish uchun eng ommabop kutubxonalardan biri. Bu JavaScript ilovalari uchun bashorat qilinadigan holat konteyneridir va butun ilovalar holatini boshqarish uchun ishlatiladi. Redux bilan ishlab chiqilgan ilovalarni sinab ko'rish oson va izchil xatti-harakatlarni ko'rsatadigan turli muhitlarda ishlashi mumkin.

9 Action - bu nima sodir bo'lganligini tasvirlaydigan ob'ekt.
Reducer - bu davlat qanday o'zgarishini aniqlash uchun joy.
Store - Butun ilovaning davlat/obyekt daraxti Do'konda saqlanadi.
View - shunchaki do'kon tomonidan taqdim etilgan ma'lumotlarni ko'rsatadi.


10 Redux foydali tomonlar? 
Redux orqali hodisalarni boshqarib ma'lumotlar uzatishini to'g'ri tartibda bajarishimiz mumkin. Va bir biri bilan relation bo'lmagan componentlarni bir biri bilan bog'lash imkonini beradi

11 React Router nima?
React Router - bu React-ning ustiga qurilgan kuchli marshrutlash kutubxonasi bo'lib, u ilovaga yangi ekranlar va oqimlarni qo'shishda yordam beradi. Bu URL manzilni veb-sahifada ko'rsatilgan ma'lumotlar bilan sinxronlashtiradi. U standartlashtirilgan tuzilma va xatti-harakatlarni saqlaydi va bir sahifali veb-ilovalarni ishlab chiqish uchun ishlatiladi. React Router oddiy APIga ega.




12 useMemo va useEffectning farqi?
	




















